# 해당 워크플로우의 타이틀
# 명시하지 않으면 파일 경로가 타이틀이 됨
name: VOG-NEST-CICD

# 환경변수
env:
  DOCKER_IMAGE: ghcr.io/${{ secrets.VOG_NEST_GITHUB_ACTOR }}/vog-api-server-img:latest
  DOCKER_CONTAINER: vog-api-server

# 이벤트
# main 브랜치에 한하여 push가 일어날 경우
on:
  push:
    branches: ["main"]

# jobs
# 이벤트가 발생하면 해야할 작업을 명시
# 테스트, 빌드, 배포 단위로 명시
# 각각의 job은 Runner라는 컨테이너에서 개별적으로 실행
jobs:
  # job의 타이틀
  test:
    # ubuntu-20.04 환경의 Runner에서 실행
    runs-on: ubuntu-20.04
    # 컨테이너에 repository의 코드를 checkout
    # node 환경 셋업
    # 의존성 설치 및 테스트 진행
    steps:
    - name: checkout source code
      uses: actions/checkout@v3
    - name: Setup node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.19.0
        cache: 'npm'
    - run: npm install
    - run: npm run test:e2e

  # 도커 이미지 빌드
  build:
    # build가 시작되려면 test가 완료되어야 함
    needs: test
    runs-on: ubuntu-20.04
    # Runner에 repository의 코드를 checkout
    # 컨테이너에 도커 환경 셋업
    # Github Container Registry 로그인
    # 도커 이미지 빌드 후 ghcr에 push
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
    - name: Set up docker build
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to ghcr
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ secrets.VOG_NEST_GITHUB_ACTOR }}
        password: ${{ secrets.VOG_GHCR_TOKEN }}
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ghcr.io/${{ secrets.VOG_NEST_GITHUB_ACTOR }}/${{ env.DOCKER_IMAGE_TITLE }}:latest

  # ec2 환경에 배포
  deploy:
    needs: build
    # ec2에 설치한 Runner로 job 실행
    runs-on: [self-hosted, label-vog ]
    # Github Container Registry 로그인
    # Docker Container 중지 및 삭제, Docker image 삭제
    # 새로 배포한 Docker Image로 Container 실행
    steps:
    - name: Login to ghcr
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ secrets.VOG_NEST_GITHUB_ACTOR }}
        password: ${{ secrets.VOG_GHCR_TOKEN }}
    - name: run docker
      run: |
          docker stop ${{ env.DOCKER_CONTAINER }} && docker rm ${{ env.DOCKER_CONTAINER }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 80:3000 --name ${{ env.DOCKER_CONTAINER }} --restart always ${{ env.DOCKER_IMAGE }}:latest