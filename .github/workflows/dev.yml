name: VOG-API-SERVER-CICD

env:
  DOCKER_CONTAINER_NAME_NO_1: vog-api-server_1
  DOCKER_CONTAINER_NAME_NO_2: vog-api-server_2
  DOCKER_IMAGE_NAME: vog-api-server-image
  DOCKER_HUB_NAME: hhs7425

on:
  push:
    branches: ["dev"]

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v3
    - name: Create .env File
      run: |
        touch .env
        echo MYSQL_USER=${{ secrets.VOG_NEST_ENV_MYSQL_USER }} >> .env
        echo MYSQL_HOST=${{ secrets.VOG_NEST_ENV_MYSQL_HOST }} >> .env
        echo MYSQL_PASSWORD=${{ secrets.VOG_NEST_ENV_MYSQL_PASSWORD }} >> .env
        echo MYSQL_PORT=${{ secrets.VOG_NEST_ENV_MYSQL_PORT }} >> .env

        echo REDIS_SESSION_HOST=${{ secrets.VOG_NEST_ENV_REDIS_SESSION_HOST }} >> .env
        echo REDIS_SESSION_PASSWORD=${{ secrets.VOG_NEST_ENV_REDIS_SESSION_PASSWORD }} >> .env
        echo REDIS_SESSION_PORT=${{ secrets.VOG_NEST_ENV_REDIS_SESSION_PORT }} >> .env

        echo REDIS_LIKE_HOST=${{ secrets.VOG_NEST_ENV_REDIS_LIKE_HOST }} >> .env
        echo REDIS_LIKE_PASSWORD=${{ secrets.VOG_NEST_ENV_REDIS_LIKE_PASSWORD }} >> .env
        echo REDIS_LIKE_PORT=${{ secrets.VOG_NEST_ENV_REDIS_LIKE_PORT }} >> .env

        echo REDIS_CACHE_HOST=${{ secrets.VOG_NEST_ENV_REDIS_CACHE_HOST }} >> .env
        echo REDIS_CACHE_PASSWORD=${{ secrets.VOG_NEST_ENV_REDIS_CACHE_PASSWORD }} >> .env
        echo REDIS_CACHE_PORT=${{ secrets.VOG_NEST_ENV_REDIS_CACHE_PORT }} >> .env

        echo SESSION_SECRET=${{ secrets.VOG_NEST_ENV_SESSION_SECRET }} >> .env

        echo AWS_S3_ACCESS_KEY=${{ secrets.VOG_NEST_ENV_AWS_S3_ACCESS_KEY }} >> .env
        echo AWS_S3_SECRET_ACCESS_KEY=${{ secrets.VOG_NEST_ENV_AWS_S3_SECRET_ACCESS_KEY }} >> .env
        echo AWS_S3_REGION=${{ secrets.VOG_NEST_ENV_AWS_S3_REGION }} >> .env
        echo AWS_S3_BUCKET_NAME=${{ secrets.VOG_NEST_ENV_AWS_S3_BUCKET_NAME }} >> .env
        echo AWS_S3_File_URL=${{ secrets.VOG_NEST_ENV_AWS_S3_File_URL }} >> .env

        echo FRONT_END_SERVER_URL_1=${{ secrets.VOG_NEST_ENV_FRONT_END_SERVER_URL_1 }} >> .env
        echo FRONT_END_SERVER_URL_2=${{ secrets.VOG_NEST_ENV_FRONT_END_SERVER_URL_2 }} >> .env
        
        echo OAUTH_NAVER_CLIENT_ID=${{ secrets.VOG_NEST_ENV_OAUTH_NAVER_CLIENT_ID }} >> .env
        echo OAUTH_NAVER_CLIENT_SECRET=${{ secrets.VOG_NEST_ENV_OAUTH_NAVER_CLIENT_SECRET }} >> .env
        echo OAUTH_NAVER_STATE=${{ secrets.VOG_NEST_ENV_OAUTH_NAVER_STATE }} >> .env
        

        cat .env
        ls -al
    - name: Set up docker build
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Login To Docker Hub
      run: |
        sudo docker login -u ${{ secrets.DOCKER_HUB_USER }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
    - name: Build
      run: |
        sudo docker build -t ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest .
        ls -al
    - name: Push
      run: |
        sudo docker push ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: [self-hosted, label-vog ]
    steps:
    - name: Login To Docker Hub
      run: |
        sudo docker login -u ${{ secrets.DOCKER_HUB_USER }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
    - name: Run docker
      run: |
        docker stop ${{ env.DOCKER_CONTAINER_NAME_NO_1 }} && docker rm ${{ env.DOCKER_CONTAINER_NAME_NO_1 }}
        docker stop ${{ env.DOCKER_CONTAINER_NAME_NO_2 }} && docker rm ${{ env.DOCKER_CONTAINER_NAME_NO_2 }} && docker rmi ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker pull ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker run -d -p 3000:3000 --name ${{ env.DOCKER_CONTAINER_NAME_NO_1 }} --restart always ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker run -d -p 3001:3000 --name ${{ env.DOCKER_CONTAINER_NAME_NO_2 }} --restart always ${{ env.DOCKER_HUB_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
